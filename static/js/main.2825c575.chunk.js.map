{"version":3,"sources":["components/todos/Listview/index.jsx","components/todos/TableView/index.jsx","components/todos/controllers/controll-search-panel.jsx","components/todos/controllers/filter-controller.jsx","components/todos/controllers/view-controller.jsx","components/todos/controllers/bulk-controller.jsx","components/todos/controllers/index.jsx","components/todos/create-todo-form/index.jsx","components/todos/index.jsx","app.jsx","serviceWorker.js","index.js"],"names":["ListItem","todo","toggleSelect","toggleComplete","ListGroupItem","className","CustomInput","type","id","checked","isSelect","onChange","text","time","toDateString","Button","color","isComplete","onClick","ListView","todos","ListGroup","map","key","RowItem","scope","TableView","Table","SearchPanel","term","handleSearch","toggleForm","Input","placeholder","value","event","target","FilterController","handleFilter","ButtonGroup","ViewController","view","changeView","Label","for","name","BulkController","clearSelected","clearComplete","reset","Controller","Row","Col","md","size","CreateTodoForm","state","description","handleChange","setState","handleSubmit","preventDefault","props","createTodo","Form","onSubmit","this","FormGroup","React","Component","Todos","Date","isOpenTodoForm","searchTerm","filter","performSearch","toLowerCase","includes","performFilter","getView","shortid","generate","todoId","find","t","Modal","isOpen","toggle","ModalHeader","ModalBody","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2825c575.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {ListGroup, ListGroupItem, CustomInput, Button} from 'reactstrap';\r\nimport Todos from '..';\r\n\r\n//Single List Item Component\r\nconst ListItem=({todo,toggleSelect,toggleComplete})=>{\r\n    return(\r\n         <ListGroupItem className='d-flex align-items-center'>\r\n          <CustomInput\r\n          type='checkbox'\r\n          id={todo.id}\r\n          checked={todo.isSelect}\r\n          onChange={()=>toggleSelect(todo.id)}\r\n          />\r\n\r\n\r\n          <div className='mx-3'>\r\n          <h4>{todo.text}</h4>\r\n          <p>{todo.time.toDateString()}</p>\r\n          </div>\r\n\r\n          <Button\r\n          className='ml-auto' color={todo.isComplete?'danger':'success'}\r\n          onClick={()=>toggleComplete(todo.id)}\r\n          >\r\n          {todo.isComplete?'Complete':'Running'}\r\n          </Button>\r\n         </ListGroupItem>\r\n    )\r\n};\r\n\r\nListItem.propTypes={\r\ntodo:PropTypes.object.isRequired,\r\ntoggleSelect:PropTypes.func.isRequired,\r\ntoggleComplete:PropTypes.func.isRequired\r\n};\r\n\r\n//Main ListGroup\r\n\r\nconst ListView =({todos,toggleSelect,toggleComplete})=>{\r\n    return (\r\n        <ListGroup>\r\n        {todos.map(todo=>(\r\n            <ListItem \r\n            key={todo.id}\r\n            todo={todo}\r\n            toggleSelect={toggleSelect}\r\n            toggleComplete={toggleComplete}\r\n            />\r\n        ))}\r\n        </ListGroup>\r\n    )\r\n} ;\r\n\r\nListView.propTypes={\r\n    todos:PropTypes.object.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired\r\n};\r\n\r\nexport default ListView;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {Button, CustomInput, Table } from 'reactstrap'\r\n\r\n//Single Row Item\r\n\r\nconst RowItem=({todo,toggleSelect,toggleComplete})=>(  //implecit return\r\n  <tr>\r\n   <td scope='row'>\r\n        <CustomInput\r\n        type='checkbox'\r\n        id={todo.id}\r\n        checked={todo.isSelect}\r\n        onChange={()=>toggleSelect(todo.id)}\r\n       />\r\n</td>\r\n<td>\r\n{todo.time.toDateString()}\r\n</td>\r\n<td>\r\n{todo.text}\r\n</td>\r\n<td>\r\n<Button \r\ncolor={todo.isComplete?'danger':'success'}\r\nonClick={()=>toggleComplete(todo.id)}\r\n>{todo.isComplete?'Complete':'Running'}</Button>\r\n</td>\r\n</tr>\r\n\r\n);\r\n\r\nRowItem.propTypes={\r\n    todo:PropTypes.object.isRequired,\r\n        toggleSelect:PropTypes.func.isRequired,\r\n        toggleComplete:PropTypes.func.isRequired\r\n};\r\n\r\n\r\nconst TableView =({todos, toggleSelect, toggleComplete})=>(\r\n        <Table>\r\n           <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Time</th>\r\n                <th>Todo</th>\r\n                <th>Action</th>\r\n             </tr>\r\n         </thead>\r\n        <tbody>\r\n           {todos.map(todo=>(\r\n               <RowItem\r\n               key={todo.id}\r\n               todo={todo}\r\n               toggleSelect={toggleSelect}\r\n               toggleComplete={toggleComplete}\r\n\r\n               />\r\n           ))}\r\n           </tbody>\r\n           </Table>\r\n);\r\nTableView.propTypes={\r\n        todos:PropTypes.object.isRequired,\r\n        toggleSelect:PropTypes.func.isRequired,\r\n        toggleComplete:PropTypes.func.isRequired\r\n};\r\n\r\nexport default TableView;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Input} from 'reactstrap';\r\n\r\nconst SearchPanel =({term,handleSearch,toggleForm})=>(\r\n    <div className=\"d-flex\">\r\n    <Input\r\n    placeholder=\"Enter Search Term\"\r\n    className=\"mr-3\"\r\n    value={term}\r\n    onChange={event=>handleSearch(event.target.value)}\r\n    />\r\n    <Button color=\"success\" onClick={toggleForm}>\r\n    New\r\n    </Button>\r\n    </div>\r\n);\r\nSearchPanel.propTypes={\r\n    term:PropTypes.string.isRequired,\r\n    handleSearch:PropTypes.func.isRequired,\r\n    toggleForm:PropTypes.func.isRequired\r\n};\r\nexport default SearchPanel;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {ButtonGroup, Button} from 'reactstrap';\r\n\r\nconst FilterController =({handleFilter})=>(\r\n\r\n    <ButtonGroup> \r\n    <Button onClick={()=>handleFilter('all')}>\r\n    All\r\n    </Button>\r\n    <Button onClick={()=>handleFilter('running')}>\r\n    Running\r\n    </Button>\r\n    <Button onClick={()=>handleFilter('complete')}>\r\n    Complete\r\n    </Button>\r\n\r\n    </ButtonGroup>\r\n);\r\nFilterController.propTypes={\r\n    handleFilter:PropTypes.func.isRequired\r\n}\r\n\r\nexport default FilterController;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {Label, CustomInput } from 'reactstrap';\r\n\r\nconst ViewController=({view,changeView})=>(\r\n    <div className='d-flex'>\r\n       <Label for='list-view' className='mr-4'>\r\n       <CustomInput\r\n       type='radio'\r\n       name='view'\r\n       value='list'\r\n       id='list-view'\r\n       className='d-inline-block'\r\n       checked={view=='list'}\r\n       onChange={changeView}\r\n       />\r\n       List View\r\n       </Label>\r\n\r\n       <Label for='table-view' className='mr-4'>\r\n       <CustomInput\r\n       type='radio'\r\n       name='view'\r\n       value='table'\r\n       id='table-view'\r\n       className='d-inline-block'\r\n       checked={view=='table'}\r\n       onChange={changeView}\r\n       />\r\n       Table View\r\n       </Label>\r\n    </div>\r\n);\r\nViewController.propTypes={\r\n    view:PropTypes.string.isRequired,\r\n    changeView:PropTypes.func.isRequired\r\n};\r\nexport default ViewController;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\n\r\nconst BulkController=({clearSelected,clearComplete,reset})=>(\r\n\r\n    <ButtonGroup>\r\n    <Button color='danger' onClick={clearSelected}>Clear Selected</Button>\r\n    <Button color='danger' onClick={clearComplete}>Clear Complete</Button>\r\n    <Button color='danger' onClick={reset}>Reset</Button>\r\n    </ButtonGroup>\r\n);\r\nBulkController.propTypes={\r\n    clearSelected:PropTypes.func.isRequired,\r\n    clearComplete:PropTypes.func.isRequired,\r\n    reset:PropTypes.func.isRequired\r\n}\r\nexport default BulkController;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Col, Row } from 'reactstrap'\r\nimport SearchPanel from './controll-search-panel'\r\nimport FilterController from './filter-controller'\r\nimport ViewController from './view-controller'\r\nimport BulkController from './bulk-controller'\r\nconst Controller=({term,handleSearch,toggleForm,handleFilter,view,changeView,clearSelected,clearComplete,reset})=>(\r\n   <div>\r\n   <SearchPanel\r\n   term={term}\r\n   handleSearch={handleSearch}\r\n   toggleForm={toggleForm}\r\n   />\r\n\r\n   <Row className='my-3'>\r\n   <Col md={{size:4}}><FilterController handleFilter={handleFilter}/> </Col>\r\n   <Col md={{size:4}}><ViewController view={view} changeView={changeView}/> </Col>\r\n   <Col md={{size:4}} className='d-flex'>\r\n   <div className='ml-auto'><BulkController clearSelected={clearSelected} clearComplete={clearComplete} reset={reset}/></div>\r\n    </Col>\r\n   </Row>\r\n   </div>\r\n\r\n);\r\n\r\nController.propTypes={\r\n    term:PropTypes.string.isRequired,\r\n    view:PropTypes.string.isRequired,\r\n    handleSearch:PropTypes.func.isRequired,\r\n    toggleForm:PropTypes.func.isRequired,\r\n    handleFilter:PropTypes.func.isRequired,\r\n    changeView:PropTypes.func.isRequired,\r\n    clearSelected:PropTypes.func.isRequired,\r\n    clearComplete:PropTypes.func.isRequired,\r\n    reset:PropTypes.func.isRequired\r\n};\r\nexport default Controller;\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Form, FormGroup, Label,Input, Button } from 'reactstrap'\r\n\r\nclass CreateTodoForm extends React.Component{\r\n\r\n    state={\r\n        text:'',\r\n        description:''\r\n    }\r\n\r\n    handleChange=event=>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    };\r\n\r\n    handleSubmit=event=>{\r\n        event.preventDefault()\r\n        this.props.createTodo(this.state)\r\n        event.target.reset()\r\n        this.setState({text:'',description:''})\r\n    }\r\n    render(){\r\n\r\n        return(\r\n         <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Label>Enter Task</Label>\r\n            <Input\r\n            placeholder=\"Do some Code\"\r\n            name=\"text\"\r\n            value={this.state.text}\r\n            onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n          <Label>Description Task</Label>\r\n          <Input\r\n          type=\"textarea\"\r\n          placeholder=\"Write some short description about task\"\r\n          name=\"description\"\r\n          value={this.state.description}\r\n          onChange={this.handleChange}\r\n          />\r\n        </FormGroup>\r\n        <Button type='submit'>Create Task</Button>\r\n         </Form>\r\n        )\r\n    }\r\n};\r\n\r\nCreateTodoForm.propTypes={\r\n    createTodo:PropTypes.func.isRequired\r\n};\r\n\r\nexport default CreateTodoForm;","import React from 'react';\r\nimport ListView from './Listview/index'\r\nimport TableView from './TableView/index'\r\nimport Controller from './controllers/index'\r\nimport CreateTodoForm from './create-todo-form/index'\r\nimport {Modal,ModalBody,ModalHeader} from 'reactstrap'\r\nimport shortid from 'shortid';\r\nclass Todos extends React.Component{\r\n    state={\r\n        todos:[\r\n            {\r\n                id:'qerewtr',\r\n                text:'main todo text',\r\n                description:'Simple',\r\n                time:new Date(),\r\n                isComplete:false,\r\n                isSelect:false\r\n            },\r\n            {\r\n                id:'qerewtrt',\r\n                text:'another text',\r\n                description:'Simple',\r\n                time:new Date(),\r\n                isComplete:false,\r\n                isSelect:false\r\n            },\r\n            {\r\n                id:'qerewtrtwe',\r\n                text:'New Task',\r\n                description:'Simple',\r\n                time:new Date(),\r\n                isComplete:false,\r\n                isSelect:false\r\n            }\r\n        ],\r\n        isOpenTodoForm:false,\r\n        searchTerm:'',\r\n        view:'list',\r\n        filter:'all'\r\n    };\r\n\r\n    toggleForm=()=>{\r\n     this.setState({\r\n         isOpenTodoForm:!this.state.isOpenTodoForm\r\n        })\r\n    };\r\n\r\n    handleSearch=value=>{\r\n      this.setState({searchTerm:value})\r\n    };\r\n\r\n    handleFilter=filter=>{\r\n        this.setState({filter})\r\n    };\r\n\r\n    changeView=event=>{\r\n       this.setState({\r\n           view:event.target.value\r\n       })\r\n    };\r\n\r\n    clearSelected=()=>{\r\n        const todos=this.state.todos.filter(todo=>!todo.isSelect)\r\n        this.setState({todos})\r\n    };\r\n    clearComplete=()=>{\r\n        const todos=this.state.todos.filter(todo=>!todo.isComplete)\r\n        this.setState({todos})\r\n    };\r\n    reset=()=>{\r\n        this.setState({\r\n            \r\n        isOpenTodoForm:false,\r\n        searchTerm:'',\r\n        view:'list',\r\n        filter:'all'\r\n        })\r\n    };\r\n\r\n    performSearch=()=>{\r\n    return this.state.todos.filter(todo=>todo.text.toLowerCase().includes(this.state.searchTerm.toLowerCase()))\r\n};\r\nperformFilter=todos=>{\r\n    const {filter}=this.state\r\n    if(filter=='complete'){\r\n        return todos.filter(todo=>todo.isComplete)\r\n    }else if(filter=='running'){\r\n        return todos.filter(todo=>!todo.isComplete)\r\n    }else{\r\n          return todos\r\n    }\r\n    \r\n}\r\n\r\n   getView=()=>{\r\n       let todos=this.performSearch();\r\n       todos=this.performFilter(todos)\r\n    return  this.state.view=='list'?(\r\n        <ListView \r\n        todos={todos} \r\n        toggleSelect={this. toggleSelect}\r\n        toggleComplete={this.toggleComplete}\r\n        />):(\r\n            <TableView \r\n            todos={todos} \r\n            toggleSelect={this. toggleSelect}\r\n            toggleComplete={this.toggleComplete}\r\n            />\r\n        )\r\n        };\r\n    createTodo=todo=>{\r\n    todo.id=shortid.generate();\r\n    todo.time=new Date();\r\n    todo.isComplete=false;\r\n    todo.isSelect=false;\r\n\r\n    const todos=[todo,...this.state.todos];\r\n    this.setState({todos});\r\n    this.toggleForm(); \r\n    };\r\n\r\n    toggleSelect=todoId=>{\r\n        const todos=[...this.state.todos];\r\n        const todo=todos.find(t=>t.id==todoId)\r\n        todo.isSelect=!todo.isSelect\r\n        this.setState({todos})\r\n    };\r\n    toggleComplete=todoId=>{\r\n        const todos=[...this.state.todos];\r\n        const todo=todos.find(t=>t.id==todoId)\r\n        todo.isComplete=!todo.isComplete;\r\n        this.setState({todos})\r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n            <h1 className='display-4 text-center mb-5'>Stack Todos</h1>\r\n            <div>\r\n            <Controller \r\n            term={this.state.searchTerm}\r\n            view={this.state.view}\r\n            handleSearch={this.handleSearch}\r\n            toggleForm={this.toggleForm}\r\n            handleFilter={this.handleFilter}\r\n            changeView={this.changeView}\r\n            clearSelected={this.clearSelected}\r\n            clearComplete={this.clearComplete}\r\n            reset={this.reset}\r\n            />\r\n            {this.getView()}\r\n            \r\n            </div>\r\n            <Modal\r\n            isOpen={this.state.isOpenTodoForm}\r\n            toggle={this.toggleForm}>\r\n            <ModalHeader toggle={this.toggleForm}>\r\n            Create new Todo Item\r\n            </ModalHeader>\r\n            <ModalBody>\r\n            <CreateTodoForm createTodo={this.createTodo}/>\r\n            </ModalBody>\r\n            </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Todos;","import React from 'react'\r\nimport {Container, Col, Row} from 'reactstrap'\r\nimport Todos from './components/todos/index'\r\nfunction App(){\r\n\r\n    return(\r\n        <Container className='my-3'>\r\n        <Row>\r\n        <Col>\r\n        <Todos/>\r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}